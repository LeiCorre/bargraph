{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["req","XMLHttpRequest","open","send","onload","json","JSON","parse","responseText","w","h","p","dataL","length","d3","append","text","attr","xScale","domain","Date","d","range","yScale","svg","box","style","selectAll","data","enter","i","on","this","getAttribute","e","xA","yA","call","App","className","id","href","React","Component","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QA0CMA,G,MAAM,IAAIC,gBACZD,EAAIE,KAAK,MAAO,4FAA4F,GAC5GF,EAAIG,OACJH,EAAII,OAAS,WACX,IAAIC,EAAOC,KAAKC,MAAMP,EAAIQ,cAEpBC,EAAI,IACJC,EAAI,IACJC,EAAI,IACJC,EAAQP,EAAI,KAASQ,OAE3BC,IAAU,QAAQC,OAAO,MAAMC,KAAK,qBAAqBC,KAAK,KAAM,SAGpE,IAAMC,EAASJ,MACGK,OAAO,CAAC,IAAIC,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAKN,IAAOT,EAAI,MAAU,SAACgB,GAAD,OAAOA,EAAE,SACrEC,MAAM,CAACX,EAAGF,MAEtBc,EAAST,MACGK,OAAO,CAAC,EAAGL,IAAOT,EAAI,MAAU,SAACgB,GAAD,OAAMA,EAAE,QACxCC,MAAM,CAACZ,IAAKC,IAExBa,EAAMV,IAAU,QACPC,OAAO,OACPE,KAAK,SAAUP,GACfO,KAAK,QAASR,GAE7BgB,EAAMX,IAAU,QAAQC,OAAO,OAAOC,KAAK,SAASC,KAAK,KAAM,WAAWS,MAAM,UAAW,QAE3FF,EAAIG,UAAU,QACVC,KAAKvB,EAAI,MACTwB,QACAd,OAAO,QACPE,KAAK,KAAK,SAACI,EAAES,GAAH,OAASnB,EAAK,IAADmB,EAAYlB,KACnCK,KAAK,KAAK,SAACI,EAAES,GAAH,OAASpB,GAAGA,EAAEa,EAAOF,EAAE,IAAIV,GAAKA,KAC1CM,KAAK,QAAS,KACdA,KAAK,UAAU,SAACI,EAAGS,GAAJ,OAAUpB,EAAEa,EAAOF,EAAE,IAAIV,KACxCM,KAAK,aAAa,SAACI,GAAD,OAAOA,EAAE,MAC3BJ,KAAK,YAAY,SAACI,GAAD,OAAOA,EAAE,MAC1BJ,KAAK,OAAQ,UACbA,KAAK,QAAS,OAEdc,GAAG,aAAa,WAAY,IAAD,OAC1BN,EAAMA,EAAIR,KAAK,YAAae,KAAKC,aAAa,cACpCP,MAAM,UAAW,UACjBA,MAAM,aAAa,SAACI,GAAD,MAAO,aAAe,EAAKG,aAAa,KAAjC,eAC1BjB,MAAK,SAACkB,GAAD,OAAO,EAAKD,aAAa,aAAe,QAAW,EAAKA,aAAa,YAAc,iBAEnGF,GAAG,YAAY,SAAUG,GACxBT,EAAMA,EAAIC,MAAM,UAAW,WAGhC,IAAMS,EAAKrB,IAAcI,GAEnBkB,EAAKtB,IAAYS,GAEvBC,EAAIT,OAAO,KACPE,KAAK,YAAa,oBAClBA,KAAK,KAAM,UACXoB,KAAKF,GAETX,EAAIT,OAAO,KACPE,KAAK,YAAa,oBAClBA,KAAK,KAAM,UACXoB,KAAKD,I,IAUTE,E,uKAGF,OAGA,yBAAKC,UAAU,OACb,yBAAKC,GAAG,SACR,mCArHG,irBAsHH,uBAAGC,KAAK,8FAAR,yBAHF,MAGmI,uBAAGA,KAAK,uFAAR,qBAHnI,oC,GANcC,IAAMC,WAiBxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAClCT,QC1HKU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNR,IAASC,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFP,SAASC,eAAe,SDyHpB,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.61222257.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom'\nimport * as d3 from 'd3'\nimport './App.css';\n\n\n// used answer from https://stackoverflow.com/questions/27530462/tag-error-react-jsx-style-tag-error-on-render by Sebastian to show me how to place CSS styling directly in App.js\nconst hov = `\n      body {\n        font-size: 16px\n      }\n      .bar:hover {\n            fill: azure;\n}\n      #title {\n        text-align: center;\n        font-size: 50px;\n        font-weight: 500\n      }\n      svg {\n        margin-top: -100px\n      }\n\n      #tooltip {\n        background-color: rgb(255, 204, 255, 0.7);\n        box-shadow: 0 0 5px 3px rgb(15, 15, 15, 0.8);\n        font-size: 16px;\n        float: right;\n        height: 40px;\n        border-radius: 10px;\n        width: 120px;\n        text-align: center;\n        padding-top: 10px;\n        padding-bottom: 10px;\n        z-index: 999;\n        position: absolute;\n        top: 90px;\n      }\n\n     \n`\n\nconst req = new XMLHttpRequest();\n    req.open(\"GET\", 'https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json', true)\n    req.send()\n    req.onload = function() {\n      let json = JSON.parse(req.responseText);\n  \n      const w = 1000;\n      const h = 600;\n      const p = 100;\n      const dataL = json['data'].length\n  \n      d3.select('.App').append('h1').text(\"United States GDP\").attr('id', 'title')\n     \n\n      const xScale = d3.scaleTime()\n                       .domain([new Date(1947, 1, 1), new Date(d3.max(json['data'], (d) => d[0])) ])\n                       .range([p, w-p])\n\n      const yScale = d3.scaleLinear()\n                       .domain([0, d3.max(json['data'], (d)=> d[1])])\n                       .range([h-p, p])\n\n      const svg = d3.select('.App')\n                    .append('svg')\n                    .attr('height', h)\n                    .attr('width', w);\n\n  let box = d3.select('body').append('div').text('hello').attr('id', 'tooltip').style('display', 'none'); //inspired by the last answer on this post (https://www.freecodecamp.org/forum/t/d3-tooltip-wanted-is-that-15-chars-now/92398/6)    \n\n      svg.selectAll('rect')\n         .data(json['data']) \n         .enter()    \n         .append('rect')\n         .attr('x', (d,i) => p + i * (w-p*2)/dataL) \n         .attr('y', (d,i) => h-(h-yScale(d[1])-p) - p)\n         .attr('width', 2.8)\n         .attr('height', (d, i) => h-yScale(d[1])-p )\n         .attr('data-date', (d) => d[0])\n         .attr('data-gdp', (d) => d[1])\n         .attr('fill', 'purple')\n         .attr('class', 'bar')\n         \n         .on('mouseover', function() {\n           box = box.attr('data-date', this.getAttribute('data-date')) \n                    .style('display', 'inline')\n                    .style('transform', (i) => \"translate(\" + this.getAttribute('x') + \"px\" + \",\" + (h-p*2.5) + \"px)\")\n                    .text((e) => this.getAttribute('data-date') + \"\\n\\n \" +  this.getAttribute('data-gdp') + ' Billion' ) })\n                             \n         .on('mouseout', function (e) {\n           box = box.style('display', 'none')\n         })\n      \n      const xA = d3.axisBottom(xScale)\n \n      const yA = d3.axisLeft(yScale)\n\n      svg.append('g')\n         .attr('transform', \"translate(0,\" + (h-p) + \")\")\n         .attr('id', 'x-axis')\n         .call(xA)\n  \n      svg.append('g') \n         .attr('transform', \"translate(\" + p + \",0)\")  \n         .attr('id', 'y-axis')\n         .call(yA) \n\n\n      \n        \n\n\n}\n\n\nclass App extends React.Component {\n \n  render() {\n    return (\n    \n    \n    <div className=\"App\">\n      <div id='info' />\n      <style> {hov}</style>\n      <a href='https://stackoverflow.com/questions/27530462/tag-error-react-jsx-style-tag-error-on-render'>CSS Styling Reference</a> | <a href='https://www.freecodecamp.org/forum/t/d3-tooltip-wanted-is-that-15-chars-now/92398/6'>Tooltip Reference</a> | Coded by Lei Corre &hearts;\n    </div>\n  );\n}\n}\n\n\n\nReactDOM.render(<App />, document.getElementById('root'))\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}